<?php

/**
 * @file
 * Contains iai_aquifer.module. Used to manage aquifer content
 */
use Drupal\Core\Queue\QueueInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function iai_aquifer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the iai_aquifer module.
    case 'help.page.iai_aquifer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The IAI Aquifer module is a custom module that is responsible for defining the Aquifer content type and providing functionality for managing the content type.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Adding, editing, and viewing aquifers') . '</dt>';
      $output .= '<dd>' . t('It is not intended that the pieces of content will be created and edited directly. Rather, there is a cron job that will take care of adding and updating these pieces of content. However, as aquifers are actual pieces of content on the site, users with elevated privileges do have the ability to do all the standard things they can do with any other content types. The module has defined various paths to allow you to view different information about the module itself as well as the aquifer pieces of content.') . '</dd>';
      $output .= '<dt>' . t('A few helpful notes') . '</dt>';
      $output .= '<dd>' . t('This module is intended to demonstrate certain concepts. It is not intended to necessarily fully implement all the details. For instance, one of the concepts this module demonstrates is the creation and use of a service. The "aquifer retrieval service" does not actually call out to an external resource; it just hard codes responses. I have included comments throughout the code to indicate where I have taken other similar shortcuts.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

function iai_aquifer_hook_cron() {
  $last_run = \Drupal::state()->get('aquifer_update.last_run') ?: 0;
  if ((REQUEST_TIME - $last_run) < (24 * 60 * 60) ) {
    return;
  }

  $queue = \Drupal::queue('aquifer_updates');
  $aquifer_retrieval_service = \Drupal::service('aquifer_retrieval_service');
  $aquifer_names = $aquifer_retrieval_service->getAquiferNames();
  aquifer_delete_queued_updates($queue, $aquifer_names);

  foreach ($aquifer_names as $aquifer_name) {
    $aquifer_data = $aquifer_retrieval_service->getAquiferData($aquifer_name);
    $aquifer_data = array_merge(array('name' => $aquifer_name), $aquifer_data);
    $queue->createItem($aquifer_data);
  }
  \Drupal::state()->set('aquifer_update.last_run', REQUEST_TIME);
}

function aquifer_delete_queued_updates(QueueInterface $queue, $delete_list) {
  while ($item = $queue->claimItem()) {
    if (in_array($item->data->name, $delete_list)) {
      $queue->deleteItem($item);
    }
    else {
      $queue->releaseItem();
    }
  }
}
